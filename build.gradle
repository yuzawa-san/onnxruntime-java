plugins {
	id "com.diffplug.spotless" version "6.2.1"
	id 'java'
	id 'maven-publish'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id "com.google.protobuf" version "0.8.18"
}

apply plugin: "java-library"

spotless {
	java {
		target '**/*.java'
		targetExclude "${project.buildDir}/**/*.java"
		licenseHeader '/*\n * Copyright (c) $YEAR James Yuzawa (https://www.jyuzawa.com/)\n * All rights reserved. Licensed under the MIT License.\n */'
		removeUnusedImports()
		importOrder()
		palantirJavaFormat()
		endWithNewline()
	}
	format 'misc', {
		target '**/*.gradle', '**/*.proto', '**/*.feature'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	format 'md', {
		target '**/*.md'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "com/jyuzawa/onnxruntime_extern/**")
		}))
	}
}

sourceCompatibility = targetCompatibility = 17

def ORT_VERSION = project.findProperty('com.jyuzawa.onnxruntime.library_version')
def BUILD_VERSION = project.findProperty('com.jyuzawa.onnxruntime.build_version')
version = "${ORT_VERSION}-${BUILD_VERSION}"

repositories {
	mavenCentral()
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	repositories {
		maven {
			name = 'GitHub'
			url = uri("https://maven.pkg.github.com/yuzawa-san/onnxruntime-java")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
			}
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = 'com.jyuzawa'
			artifactId = 'onnxruntime-java'
			from components.java
		}
	}
}

dependencies {
	testImplementation "junit:junit:4.13.2"
	testImplementation 'com.google.protobuf:protobuf-java:3.19.4'
	api "io.netty:netty-common:4.1.73.Final"
	testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.17.1'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-jpl:2.17.1'
}

task make(type: Exec) {
	commandLine 'make', "ORT_VERSION=${ORT_VERSION}"
}

task jextract(type: Exec) {
	commandLine 'make', 'onnxruntime_all.h.conf', "ORT_VERSION=${ORT_VERSION}"
}

sourceSets {
	main {
		java {
			srcDirs += "${project.buildDir}/generated/jextract/"
		}
	}
	test {
		java {
			srcDirs "${protobuf.generatedFilesBaseDir}/test/java"
		}
		resources {
			srcDir "${project.buildDir}/jnioutput"
		}
	}
}

compileJava {
	dependsOn make
}

java {
	modularity.inferModulePath = true
}

javadoc {
}

def moduleName = "com.jyuzawa.onnxruntime"
jar {
	from "${project.buildDir}/jnioutput"
	manifest {
		attributes('Automatic-Module-Name': moduleName)
	}
}

tasks.named('compileJava') {
	// use the project's version or define one directly
	options.javaModuleVersion = provider { project.version }
}


test {
	jvmArgs "--enable-native-access=ALL-UNNAMED", '--add-modules', 'jdk.incubator.foreign'
	finalizedBy jacocoTestReport
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.19.4"
	}
	generateProtoTasks {
		all().each { task -> }
		ofSourceSet('test')
	}
}
