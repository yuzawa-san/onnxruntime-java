plugins {
	id "com.diffplug.spotless" version "6.4.2"
	id 'java'
	id 'maven-publish'
	id 'signing'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id "com.google.protobuf" version "0.8.18"
	id "com.github.jakemarsden.git-hooks" version "0.0.2"
}

apply plugin: "java-library"

allprojects {
	apply plugin: "java"
	apply plugin: "com.diffplug.spotless"
	sourceCompatibility = targetCompatibility = 17
	repositories {
		mavenCentral()
	}
	spotless {
		java {
			target '**/*.java'
			targetExclude "${project.buildDir}/**/*.java"
			licenseHeader '/*\n * Copyright (c) $YEAR James Yuzawa (https://www.jyuzawa.com/)\n * SPDX-License-Identifier: MIT\n */'
			removeUnusedImports()
			importOrder()
			palantirJavaFormat()
			endWithNewline()
		}
		format 'misc', {
			target '**/*.gradle', '**/*.proto', '**/*.feature'
			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
		format 'md', {
			target '**/*.md'
			trimTrailingWhitespace()
			endWithNewline()
		}
	}
}

gitHooks {
	hooks = ['pre-push': 'spotlessCheck']
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "com/jyuzawa/onnxruntime_extern/**")
		}))
	}
}

description = "A Java binding of Microsoft's ONNX Runtime project."

// NOTE: to bump ORT version, update gradle.properties then run `./gradlew clean jextractClean jextract`
def ORT_VERSION = project.findProperty('com.jyuzawa.onnxruntime.library_version')

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def jarAttributes = [
	'Built-By'               : System.properties['user.name'],
	'Build-Timestamp'        : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
	'Specification-Vendor'   : 'yuzawa-san',
	'Specification-Title'    : project.name,
	'Specification-Version'  : project.version,
	'Implementation-Vendor'  : 'yuzawa-san',
	'Implementation-Title'   : project.name,
	'Implementation-Version' : "${-> getGitHash()}",
	'Onnxruntime-Version'    : ORT_VERSION,
	'Created-By'             : "Gradle ${gradle.gradleVersion}",
	'Build-Jdk'              : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
	'Build-OS'               : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
]

java {
	withJavadocJar()
	withSourcesJar()
}


def cpuOsArches = ["linux-x86_64", "linux-aarch_64", "windows-x86_64", "windows-aarch_64", "osx-x86_64", "osx-aarch_64"]
def gpuOsArches = ["linux-x86_64-gpu", "windows-x86_64-gpu"]
def allArches = cpuOsArches + gpuOsArches

allArches.each { osArch ->
	task "osArchJar${osArch}" (type: Jar) {
		from ("${project.buildDir}/onnxruntime-${ORT_VERSION}/${osArch}")
		classifier osArch
		manifest {
			attributes(jarAttributes)
		}
		from ("${project.projectDir}/src/dist")
		from ("${project.buildDir}/onnxruntime-${ORT_VERSION}/onnxruntime-linux-x64-1.10.0/LICENSE") {
			rename "LICENSE", "LICENSE.onnxruntime.txt"
			into "META-INF/licenses/"
		}
	}
}

configurations {
	cpu {
		cpuOsArches.each {
			outgoing.artifact(tasks.named("osArchJar${it}"))
		}
	}
	nativeElements {
		canBeResolved = false
		canBeConsumed = true
		attributes {
			attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
			attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
			attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.DYNAMIC_LIB))

		}
		allArches.each {
			outgoing.artifact(tasks.named("osArchJar${it}"))
		}
	}
}
components.java {
	addVariantsFromConfiguration(configurations.nativeElements) {
		mapToOptional()
	}
}

def makePom(node, osArches) {
	def parentNode = node.appendNode('parent')
	parentNode.appendNode('groupId', project.group)
	parentNode.appendNode('artifactId', project.name)
	parentNode.appendNode('version', version)
	def dependenciesNode = node.appendNode('dependencies')
	def mainDependency = dependenciesNode.appendNode('dependency')
	mainDependency.appendNode('groupId', project.group)
	mainDependency.appendNode('artifactId', project.name)
	mainDependency.appendNode('version', version)
	osArches.each {
		def dependency = dependenciesNode.appendNode('dependency')
		dependency.appendNode('groupId', project.group)
		dependency.appendNode('artifactId', project.name)
		dependency.appendNode('version', version)
		dependency.appendNode('classifier', it)
	}
}

project.group = "com.jyuzawa"
def REPO = "yuzawa-san/onnxruntime-java"
publishing {
	repositories {
		maven {
			name = 'Maven'
			url = uri(version.endsWith('-SNAPSHOT') ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/' : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
			credentials {
				username = project.findProperty("ossrhUsername")
				password = project.findProperty("ossrhPassword")
			}
		}
	}
	publications {
		onnxruntimeCpu(MavenPublication) {
			artifactId = "${rootProject.name}-cpu"
			pom.withXml {
				makePom(asNode(), cpuOsArches)
			}
		}
		onnxruntimeGpu(MavenPublication) {
			artifactId = "${rootProject.name}-gpu"
			pom.withXml {
				makePom(asNode(), gpuOsArches)
			}
		}
		onnxruntime(MavenPublication) {
			from components.java
			pom {
				name = 'ONNX Runtime for Java'
				inceptionYear = '2022'
				description = project.description
				url = "https://github.com/${REPO}"
				issueManagement {
					url = "https://github.com/${REPO}/issues"
					system = "GitHub Issues"
				}
				licenses {
					license {
						name = 'MIT License'
						url = 'https://opensource.org/licenses/MIT'
						distribution = 'repo'
					}
				}
				developers {
					developer {
						id = 'yuzawa-san'
						name = 'James Yuzawa'
						email = 'jtyuzawa@gmail.com'
					}
				}
				scm {
					connection = "scm:git:git://github.com/${REPO}.git"
					developerConnection = "scm:git:git@github.com:${REPO}.git"
					url = "https://github.com/${REPO}"
				}
			}
		}
	}
}

signing {
	sign publishing.publications
}

dependencies {
	testImplementation "junit:junit:4.13.2"
	testImplementation 'com.google.protobuf:protobuf-java:3.20.0'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.17.2'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-jpl:2.17.2'
}

task make(type: Exec) {
	environment('ORT_VERSION', ORT_VERSION)
	commandLine 'make'
}

compileJava {
	dependsOn make
}

task jextractClean(type: Delete) {
	delete 'symbols.conf'
	delete 'src/main/java/com/jyuzawa/onnxruntime_extern'
}

task jextract(type: Exec) {
	environment('ORT_VERSION', ORT_VERSION)
	commandLine 'make', 'src/main/java/com/jyuzawa/onnxruntime_extern/onnxruntime_all_h.java'
	finalizedBy tasks.named('spotlessJavaApply')
}

sourceSets {
	test {
		java {
			srcDirs "${protobuf.generatedFilesBaseDir}/test/java"
		}
		resources {
			cpuOsArches.each { osArch ->
				srcDir "${project.buildDir}/onnxruntime-${ORT_VERSION}/${osArch}"
			}
		}
	}
}

java {
	modularity.inferModulePath = true
}

javadoc {
}

def moduleName = "com.jyuzawa.onnxruntime"
jar {
	manifest {
		attributes(jarAttributes)
	}
	into("META-INF/maven/$project.group/$project.name") {
		from { generatePomFileForOnnxruntimePublication }
		rename ".*", "pom.xml"
	}
}

tasks.named('compileJava') {
	// use the project's version or define one directly
	options.javaModuleVersion = provider { project.version }
}


test {
	jvmArgs '--enable-native-access=ALL-UNNAMED', '--add-modules', 'jdk.incubator.foreign'
	finalizedBy jacocoTestReport
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.20.0"
	}
	generateProtoTasks {
		all().each { task -> }
		ofSourceSet('test')
	}
}
