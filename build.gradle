plugins {
	id "com.diffplug.spotless" version "6.2.1"
	id 'java'
	id 'maven-publish'
	id 'eclipse'
	id 'idea'
}

apply plugin: "java-library"

spotless {
	java {
		target '**/*.java'
		targetExclude "${project.buildDir}/**/*.java"
		licenseHeader '/*\n * Copyright (c) $YEAR James Yuzawa (https://www.jyuzawa.com/)\n * All rights reserved. Licensed under the MIT License.\n */'
		removeUnusedImports()
		importOrder()
		palantirJavaFormat()
		endWithNewline()
	}
	format 'misc', {
		target '**/*.gradle', '**/*.proto', '**/*.feature'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	format 'md', {
		target '**/*.md'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

sourceCompatibility = targetCompatibility = 17

def ORT_VERSION = project.findProperty('com.jyuzawa.onnxruntime.library_version')
def BUILD_VERSION = project.findProperty('com.jyuzawa.onnxruntime.build_version')
version = "${ORT_VERSION}-${BUILD_VERSION}"

repositories {
	mavenCentral()
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	repositories {
		maven {
			name = 'GitHub'
			url = uri("https://maven.pkg.github.com/yuzawa-san/onnxruntime-java")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
			}
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = 'com.jyuzawa'
			artifactId = 'onnxruntime-java'
			from components.java
		}
	}
}

dependencies {
	testImplementation "junit:junit:4.13.2"
	api "io.netty:netty-common:4.1.73.Final"
}

task make(type: Exec) {
	commandLine 'make', "ORT_VERSION=${ORT_VERSION}"
}

task jextract(type: Exec) {
	commandLine 'make', 'onnxruntime_all.h.conf', "ORT_VERSION=${ORT_VERSION}"
}

sourceSets {
	main {
		java {
			srcDirs += "${project.buildDir}/generated/jextract/"
		}
	}
}

compileJava {
	dependsOn make
}

tasks.withType(AbstractCompile) {
options.compilerArgs += ["--add-modules", "jdk.incubator.foreign"]
}

tasks.withType(Test) {
jvmArgs += ["--add-modules", "jdk.incubator.foreign"]
}

javadoc {
	options.addStringOption("-add-modules","jdk.incubator.foreign")
}

jar {
	from "${project.buildDir}/jnioutput"
}

test {
	jvmArgs '--enable-native-access=ALL-UNNAMED', '--add-modules', 'jdk.incubator.foreign'
}
